package mysql

import "testing"

func TestParseComQuery(t *testing.T) {
	expected := "SELECT article, dealer, price FROM shop WHERE  price=(SELECT MAX(price) FROM shop)"

	comQueryValid := []byte{
		0x53, 0x00, 0x00, 0x00, 0x03, 0x53, 0x45,
		0x4c, 0x45, 0x43, 0x54, 0x20, 0x61, 0x72,
		0x74, 0x69, 0x63, 0x6c, 0x65, 0x2c, 0x20,
		0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2c,
		0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20,
		0x46, 0x52, 0x4f, 0x4d, 0x20, 0x73, 0x68,
		0x6f, 0x70, 0x20, 0x57, 0x48, 0x45, 0x52,
		0x45, 0x20, 0x20, 0x70, 0x72, 0x69, 0x63,
		0x65, 0x3d, 0x28, 0x53, 0x45, 0x4c, 0x45,
		0x43, 0x54, 0x20, 0x4d, 0x41, 0x58, 0x28,
		0x70, 0x72, 0x69, 0x63, 0x65, 0x29, 0x20,
		0x46, 0x52, 0x4f, 0x4d, 0x20, 0x73, 0x68,
		0x6f, 0x70, 0x29}

	parsed, err := ParseComQuery(comQueryValid)
	if err != nil {
		t.Fatal(err.Error())
	}

	if parsed.Query != expected {
		t.Error("Parsed query does not match reference query")
	}
}

func TestParseComQueryInvalid(t *testing.T) {
	comQueryInvalid := []byte{
		0x53, 0x00, 0x00, 0x00, 0x01, 0x53, 0x45,
		0x4c, 0x45, 0x43, 0x54, 0x20, 0x61, 0x72,
		0x74, 0x69, 0x63, 0x6c, 0x65, 0x2c, 0x20,
		0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2c,
		0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20,
		0x46, 0x52, 0x4f, 0x4d, 0x20, 0x73, 0x68,
		0x6f, 0x70, 0x20, 0x57, 0x48, 0x45, 0x52,
		0x45, 0x20, 0x20, 0x70, 0x72, 0x69, 0x63,
		0x65, 0x3d, 0x28, 0x53, 0x45, 0x4c, 0x45,
		0x43, 0x54, 0x20, 0x4d, 0x41, 0x58, 0x28,
		0x70, 0x72, 0x69, 0x63, 0x65, 0x29, 0x20,
		0x46, 0x52, 0x4f, 0x4d, 0x20, 0x73, 0x68,
		0x6f, 0x70, 0x29}

	_, err := ParseComQuery(comQueryInvalid)
	if err == nil {
		t.Error("Got no error for invalid packet")
	}

	_, err = ParseComQuery([]byte{})
	if err == nil {
		t.Error("Got no error for empty packet")
	}

	_, err = ParseComQuery([]byte{0x53, 0x00, 0x00, 0x00, 0x03})
	if err == nil {
		t.Error("Got no error for malformed packet")
	}
}

func TestParseOkValid(t *testing.T) {
	okValid := []byte{
		0x30, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x28, 0x52, 0x6f,
		0x77, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63,
		0x68, 0x65, 0x64, 0x3a, 0x20, 0x31, 0x20,
		0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
		0x64, 0x3a, 0x20, 0x31, 0x20, 0x20, 0x57,
		0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
		0x3a, 0x20, 0x30}

	parsed, err := ParseOk(okValid)
	if err != nil {
		t.Fatal(err.Error())
	}

	if parsed.AffectedRows != 1 {
		t.Error("AffectedRows does not match reference value")
	}
}

func TestParseOkInvalid(t *testing.T) {
	okInvalid := []byte{
		0x30, 0x00, 0x00, 0x01, 0x05, 0x01, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x28, 0x52, 0x6f,
		0x77, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63,
		0x68, 0x65, 0x64, 0x3a, 0x20, 0x31, 0x20,
		0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
		0x64, 0x3a, 0x20, 0x31, 0x20, 0x20, 0x57,
		0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
		0x3a, 0x20, 0x30}

	_, err := ParseOk(okInvalid)
	if err == nil {
		t.Error("Got no error for invalid packet")
	}

	_, err = ParseOk([]byte{})
	if err == nil {
		t.Error("Got no error for empty packet")
	}
}
